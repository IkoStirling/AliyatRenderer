set(MODULE_NAME renderer)
set(INTERFACE_NAME ${MODULE_NAME}_xxx)
file(GLOB_RECURSE SRCS
	"*.cpp"
	"*.c"
	"${CMAKE_SOURCE_DIR}/assets/core/shaders/UIRenderer/*.sc"
)
add_library(${MODULE_NAME} STATIC
    ${SRCS}
)

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_definitions(BX_CONFIG_DEBUG=1)
	set(bgfx_DIR "${CMAKE_SOURCE_DIR}/thirdParty/bgfx-install/debug/lib/cmake/bgfx")
else()
    add_compile_definitions(BX_CONFIG_DEBUG=0)
	set(bgfx_DIR "${CMAKE_SOURCE_DIR}/thirdParty/bgfx-install/release/lib/cmake/bgfx")
endif()
find_package(bgfx REQUIRED)

# UI Shader
bgfx_compile_shaders(
  TYPE VERTEX
  SHADERS ${CMAKE_SOURCE_DIR}/assets/core/shaders/UIRenderer/vs_ui.sc
  VARYING_DEF ${CMAKE_SOURCE_DIR}/assets/core/shaders/UIRenderer/varying.def.sc
  OUTPUT_DIR ${CMAKE_SOURCE_DIR}/generated/include/shaders
  AS_HEADERS
)
bgfx_compile_shaders(
  TYPE FRAGMENT
  SHADERS ${CMAKE_SOURCE_DIR}/assets/core/shaders/UIRenderer/fs_ui.sc
  VARYING_DEF ${CMAKE_SOURCE_DIR}/assets/core/shaders/UIRenderer/varying.def.sc
  OUTPUT_DIR ${CMAKE_SOURCE_DIR}/generated/include/shaders
  AS_HEADERS
)


target_include_directories(${MODULE_NAME} PUBLIC 
	${CMAKE_CURRENT_SOURCE_DIR}/include
	${CMAKE_SOURCE_DIR}/generated/include/shaders
)

file(GLOB RENDER_LIBS "${CMAKE_SOURCE_DIR}/thirdParty/lib/*")
find_package(Freetype REQUIRED)
find_package(OpenCV REQUIRED core imgproc highgui imgcodecs)

# CMAKE自动去重，不会链接两次
target_link_libraries(${MODULE_NAME} 
	PUBLIC 
	module_manager 
	resource_manager
	input_system
	bgfx::bgfx
	PRIVATE
	${RENDER_LIBS}
	Freetype::Freetype
	${OpenCV_LIBS}
) 

